
@{
    ViewData["Title"] = "Dashboard";
}

@model DashboardViewModel

<partial name="_ChartJSImports" />
<script type="text/javascript" src="~/js/wsclient.js"></script>

<div class="text-center">
    <div class="ui statistics">
        <div class="ui tiny statistic">
            <div id="rv" class="value">
                @Model.Rules
            </div>
            <div id="rd" class="label">
                Rule@((@Model.Rules != 1) ? "s" : string.Empty)
            </div>
        </div>
        <div class="ui tiny statistic">
            <div id="qv" class="value">
                @Model.Queued
            </div>
            <div id="qd" class="label">
                Queued ticket@((@Model.Queued != 1) ? "s" : string.Empty)
            </div>
        </div>
        <div class="ui tiny statistic">
            <div id="uv" class="value">
                @Model.Unassigned
            </div>
            <div id="ud" class="label">
                Unassigned ticket@((@Model.Unassigned != 1) ? "s" : string.Empty)
            </div>
        </div>
        <div class="ui tiny statistic">
            <div id="av" class="value">
                @Model.Assigned
            </div>
            <div id="ad" class="label">
                Assigned ticket@((@Model.Assigned != 1) ? "s" : string.Empty)
            </div>
        </div>
        <div class="ui tiny statistic">
            <div id="tv" class="value">
                @Model.Total
            </div>
            <div  id="td" class="label">
                Total tickets
            </div>
        </div>
    </div>
</div>

<canvas id="pie" width="400"></canvas>
<script>
    function buildChart(queued, unassigned, assigned) {
         var ctx = document.getElementById('pie').getContext('2d');
    var myChart = new Chart(ctx, {
    type: 'pie',
    data: {
        labels: ['Queued tickets', 'Unassigned tickets', 'Assigned tickets'],
        datasets: [{
            label: '# of Votes',
            data: [queued, unassigned, assigned],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)'
            ],
            borderWidth: 1
        }]
    }
});
}
    $(document).ready(function () {
        buildChart(@Model.Queued, @Model.Unassigned, @Model.Assigned);
        subscribeWS("dashboard");
    });
</script>